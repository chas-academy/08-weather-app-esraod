{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar React = require('react');\n\nvar MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nvar DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nfunction plural(string, count, many) {\n  if (count == 1) {\n    return string;\n  } else if (many) {\n    return many;\n  } else {\n    return string + 's';\n  }\n}\n\nvar Timestamp = function (_React$Component) {\n  _inherits(Timestamp, _React$Component);\n\n  function Timestamp() {\n    _classCallCheck(this, Timestamp);\n\n    return _possibleConstructorReturn(this, (Timestamp.__proto__ || Object.getPrototypeOf(Timestamp)).apply(this, arguments));\n  }\n\n  _createClass(Timestamp, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.autoUpdate) {\n        var interval = (typeof this.props.autoUpdate === 'number' ? this.props.autoUpdate : 1) * 1000;\n        this.updateInterval = setInterval(function () {\n          _this2.forceUpdate();\n        }, interval);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.updateInterval) {\n        clearInterval(this.updateInterval);\n      }\n    }\n  }, {\n    key: '_distanceOfTimeInWords',\n    value: function _distanceOfTimeInWords(date, compare_to) {\n      var is_comparing = false;\n\n      if (compare_to) {\n        if (compare_to.toDate) compare_to = compare_to.toDate();\n        is_comparing = true;\n      } else {\n        compare_to = new Date();\n      }\n\n      var seconds = Math.floor((compare_to.getTime() - date.getTime()) / 1000);\n      var is_ago = seconds >= 0;\n      seconds = Math.abs(seconds);\n\n      if (!this.props.actualSeconds) {\n        if (seconds < 60) {\n          // 1 minute\n          if (is_comparing) {\n            return is_ago ? 'Just then' : 'Soon';\n          } else {\n            return 'A few seconds';\n          }\n        }\n      }\n\n      var distance;\n      var when = [];\n\n      if (this.props.precision == 1) {\n        if (seconds < 60) {\n          // 1 minute\n          when = seconds + ' ' + plural('second', seconds);\n        } else if (seconds < 60 * 60) {\n          // 1 hour\n          distance = Math.round(seconds / 60);\n          when = distance + ' ' + plural('minute', distance);\n        } else if (seconds < 60 * 60 * 24) {\n          // 1 day\n          distance = Math.round(seconds / (60 * 60));\n          when = distance + ' ' + plural('hour', distance);\n        } else if (seconds < 60 * 60 * 24 * 7) {\n          // 1 week\n          distance = Math.round(seconds / (60 * 60 * 24));\n          when = distance + ' ' + plural('day', distance);\n        } else if (seconds < 60 * 60 * 24 * (365 / 12)) {\n          // 1 month\n          distance = Math.round(seconds / (60 * 60 * 24 * 7));\n          when = distance + ' ' + plural('week', distance);\n        } else if (seconds < 60 * 60 * 24 * 30 * 12) {\n          // # 1 year\n          distance = Math.round(seconds / (60 * 60 * 24 * (365 / 12)));\n          when = distance + ' ' + plural('month', distance);\n        } else {\n          return this._prettyTime(date);\n        }\n      } else {\n        when = []; // Years\n\n        var YEAR = 60 * 60 * 24 * 365;\n\n        if (seconds > YEAR) {\n          distance = Math.floor(seconds / YEAR);\n          when.push(distance + ' ' + plural('year', distance));\n          seconds -= distance * YEAR;\n        } // Months\n\n\n        var MONTH = 60 * 60 * 24 * (365 / 12);\n\n        if (seconds > MONTH) {\n          distance = Math.floor(seconds / MONTH);\n          when.push(distance + ' ' + plural('month', distance));\n          seconds -= distance * MONTH;\n        } // Days\n\n\n        var DAY = 60 * 60 * 24;\n\n        if (seconds > DAY) {\n          distance = Math.floor(seconds / DAY);\n          when.push(distance + ' ' + plural('day', distance));\n          seconds -= distance * DAY;\n        } // Hours\n\n\n        var HOUR = 60 * 60;\n\n        if (seconds > HOUR) {\n          distance = Math.floor(seconds / HOUR);\n          when.push(distance + ' ' + plural('hour', distance));\n          seconds -= distance * HOUR;\n        } // Minutes\n\n\n        var MINUTE = 60;\n\n        if (seconds > MINUTE) {\n          distance = Math.floor(seconds / MINUTE);\n          when.push(distance + ' ' + plural('minute', distance));\n          seconds -= distance * MINUTE;\n        }\n\n        if (seconds > 0) {\n          when.push(seconds + ' ' + plural('second', seconds));\n        }\n\n        when = when.slice(0, this.props.precision).join(', ');\n      }\n\n      if (is_comparing) {\n        return when;\n      } else if (is_ago) {\n        return when + ' ago';\n      } else {\n        return 'in ' + when;\n      }\n    }\n  }, {\n    key: '_prettyTime',\n    value: function _prettyTime(date) {\n      var hours, minutes, ampm; // eg. 5 Nov 12, 1:37pm\n\n      if (this.props.twentyFourHour) {\n        hours = date.getHours();\n        ampm = '';\n      } else {\n        if (date.getHours() % 12 == 0) {\n          hours = 12;\n        } else {\n          hours = date.getHours() % 12;\n        }\n\n        if (date.getHours() > 11) {\n          ampm = 'pm';\n        } else {\n          ampm = 'am';\n        }\n      }\n\n      if (date.getMinutes() < 10) {\n        minutes = '0' + date.getMinutes();\n      } else {\n        minutes = '' + date.getMinutes();\n      }\n\n      var day = this.props.includeDay ? DAYS[date.getDay()] + ', ' : '';\n\n      switch (this.props.format) {\n        case 'date':\n          return '' + day + date.getDate() + ' ' + MONTHS[date.getMonth()] + ' ' + date.getFullYear();\n\n        case 'time':\n          return hours + ':' + minutes + ampm;\n\n        case 'full':\n        default:\n          return '' + day + date.getDate() + ' ' + MONTHS[date.getMonth()] + ' ' + date.getFullYear() + ', ' + hours + ':' + minutes + ampm;\n      }\n    }\n  }, {\n    key: '_parseDate',\n    value: function _parseDate(date) {\n      if (date === '' || date === false || date === null) return false;\n\n      if (typeof date === 'number' || '' + parseInt(date, 10) == date) {\n        date = parseInt(date, 10);\n        if (isNaN(date)) return false;\n        date = new Date(date * 1000);\n      }\n\n      if (date.toJSON) {\n        date = date.toJSON();\n      } else {\n        date = date.toString();\n      }\n\n      var t = date.split(/[:\\-\\+TZ\\. ]/);\n\n      for (var i in t) {\n        if (t[i] !== '' && isNaN(parseInt(t[i], 10))) return false;\n      }\n\n      var d;\n\n      if (this.props.utc) {\n        d = new Date('Sun Jan 01 00:00:00 UTC 2012');\n        d.setUTCFullYear(t[0]);\n        d.setUTCMonth(t[1] - 1);\n        d.setUTCDate(t[2]);\n        d.setUTCHours(t[3]);\n        d.setUTCMinutes(t[4]);\n        d.setUTCSeconds(t[5]);\n      } else {\n        d = new Date('1/1/1970');\n        d.setFullYear(t[0]);\n        d.setMonth(t[1] - 1);\n        d.setDate(t[2]);\n        d.setHours(t[3]);\n        d.setMinutes(t[4]);\n        d.setSeconds(t[5]);\n      }\n\n      return d;\n    }\n  }, {\n    key: '_formatDate',\n    value: function _formatDate(date) {\n      var d = this._parseDate(date);\n\n      if (d === false) {\n        return 'never';\n      }\n\n      if (this.props.format == 'ago' || this.props.format == 'future' || this.props.format == 'relative' || this.props.since || this.props.until) {\n        return this._distanceOfTimeInWords(d, this.props.since || this.props.until || null);\n      } else {\n        return this._prettyTime(d);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement(this.props.component, {\n        className: this.props.className,\n        style: this.props.style\n      }, this._formatDate(this.props.time));\n    }\n  }]);\n\n  return Timestamp;\n}(React.Component);\n\nTimestamp.defaultProps = {\n  time: new Date(),\n  utc: true,\n  format: 'ago',\n  precision: 1,\n  since: null,\n  until: null,\n  includeDay: false,\n  component: 'span',\n  className: '',\n  style: {},\n  autoUpdate: false,\n  twentyFourHour: false,\n  actualSeconds: false\n};\nmodule.exports = Timestamp;","map":null,"metadata":{},"sourceType":"script"}